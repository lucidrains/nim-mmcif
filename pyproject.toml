[build-system]
requires = ["hatchling", "hatch-build-scripts"]
build-backend = "hatchling.build"

[project]
name = "nim-mmcif"
dynamic = ["version"]
description = "mmCIF parser written in Nim with Python bindings"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "lucidrains", email = "lucidrains@gmail.com"}
]
requires-python = ">=3.8"
dependencies = []

keywords = [
    "mmcif",
    "cif", 
    "protein",
    "structure",
    "bioinformatics",
    "structural-biology",
    "parser",
    "crystallography",
    "nim",
    "pdb"
]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Other",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Software Development :: Libraries :: Python Modules"
]

[project.urls]
"Homepage" = "https://github.com/lucidrains/nim-mmcif"
"Bug Tracker" = "https://github.com/lucidrains/nim-mmcif/issues"
"Source Code" = "https://github.com/lucidrains/nim-mmcif"

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "hatch",
    "hatch-build-scripts",
]
test = [
    "pytest>=7.0",
]
build = [
    "hatch",
    "hatch-build-scripts",
    "cibuildwheel>=2.16.0",
]

[tool.hatch.version]
path = "nim_mmcif/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["nim_mmcif"]
artifacts = ["*.pyd", "*.so", "*.dylib"]

[[tool.hatch.build.targets.wheel.hooks.build-scripts.scripts]]
artifacts = ["nim_mmcif/*.pyd", "nim_mmcif/*.so", "nim_mmcif/*.dylib"]
commands = [
    "python build_nim.py"
]

[tool.hatch.build.targets.wheel.hooks.custom]
path = "hatch_build.py"

[tool.hatch.build.targets.sdist]
include = [
    "/nim_mmcif",
    "/tests",
    "/build_nim.py",
    "/hatch_build.py",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
    "/MANIFEST.in",
    "/mmcif.nimble"
]

[tool.cibuildwheel]
build = "cp38-* cp39-* cp310-* cp311-* cp312-*"
skip = "*-musllinux_*"
test-requires = "pytest"
test-command = "pytest {project}/tests -v"

[tool.cibuildwheel.linux]
environment = { PATH = "$HOME/.nimble/bin:$HOME/.local/share/grabnim/current/bin:$PATH" }
before-all = [
    "curl https://codeberg.org/janAkali/grabnim/raw/branch/master/misc/install.sh -sSf | sh",
    "grabnim",
    "nimble install nimpy -y"
]

[tool.cibuildwheel.macos]
environment = { PATH = "$HOME/.nimble/bin:$PATH" }
before-all = [
    "brew install nim",
    "nimble install nimpy -y"
]

[tool.cibuildwheel.windows]
before-all = [
    "choco install nim -y",
    "refreshenv",
    "nimble install nimpy -y"
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = ["."]
