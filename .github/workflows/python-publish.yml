name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-latest]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      # Install Nim based on platform
      - name: Setup Nim (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install nim
          echo "Nim version: $(nim --version)"

      - name: Setup Nim (Linux)
        if: runner.os == 'Linux'
        run: |
          curl https://nim-lang.org/choosenim/init.sh -sSf | sh -s -- -y
          echo "$HOME/.nimble/bin" >> $GITHUB_PATH
          export PATH=$HOME/.nimble/bin:$PATH
          nim --version

      - name: Setup Nim (Windows)
        if: runner.os == 'Windows'
        uses: jiro4989/setup-nim-action@v2
        with:
          nim-version: 'stable'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Nim dependencies
        run: |
          nimble install nimpy -y
          nimble install -d -y

      - name: Build wheels using cibuildwheel
        uses: pypa/cibuildwheel@v2.19.1
        env:
          CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "*-musllinux_*"
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_ARCHS_WINDOWS: "AMD64"
          CIBW_BEFORE_ALL_LINUX: |
            curl https://nim-lang.org/choosenim/init.sh -sSf | sh -s -- -y
            echo "$HOME/.nimble/bin" >> $GITHUB_PATH
            export PATH=$HOME/.nimble/bin:$PATH
            nimble install nimpy -y
          CIBW_BEFORE_ALL_MACOS: |
            brew install nim
            nimble install nimpy -y
          CIBW_BEFORE_ALL_WINDOWS: |
            choco install nim -y
            nimble install nimpy -y
          CIBW_BEFORE_BUILD: |
            pip install nimporter>=1.1.0
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: |
            python -c "import nim_mmcif; print('Successfully imported nim_mmcif')"
            python -c "from nim_mmcif import parse_mmcif; print('Successfully imported parse_mmcif')"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl
  
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Setup Nim
        run: |
          curl https://nim-lang.org/choosenim/init.sh -sSf | sh -s -- -y
          echo "$HOME/.nimble/bin" >> $GITHUB_PATH
          export PATH=$HOME/.nimble/bin:$PATH
          nim --version
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build setuptools wheel
          nimble install nimpy -y
          nimble install -d -y

      - name: Build source distribution
        run: python -m build --sdist
      
      - name: Check sdist
        run: |
          pip install twine
          twine check dist/*.tar.gz
      
      - name: Upload sdist artifact
        uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  publish-pypi:
    name: Publish to PyPI
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/nim-mmcif
    permissions:
      id-token: write  # Required for trusted publishing
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true
      
      - name: List distribution files
        run: |
          ls -la dist/
          echo "Total files to upload:"
          find dist -type f -name "*.whl" -o -name "*.tar.gz" | wc -l
      
      - name: Check distributions with twine
        run: |
          pip install twine
          twine check dist/*
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          print-hash: true
          skip-existing: true  # Skip already uploaded packages for safety

  publish-test-pypi:
    name: Publish to Test PyPI (optional)
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true
      
      - name: List distribution files
        run: |
          ls -la dist/
      
      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true
          skip-existing: true
