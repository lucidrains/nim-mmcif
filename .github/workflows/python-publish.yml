name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Publish to Test PyPI instead'
        required: false
        type: boolean
        default: false

jobs:
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install Nim
        run: |
          wget -q https://nim-lang.org/download/nim-2.2.4-linux_x64.tar.xz
          tar -xf nim-2.2.4-linux_x64.tar.xz
          export PATH=$PWD/nim-2.2.4/bin:$PATH
          echo "$PWD/nim-2.2.4/bin" >> $GITHUB_PATH
          nim --version
          nimble install nimpy -y
      
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build sdist
        run: python -m build --sdist
      
      - name: Check sdist with twine
        run: twine check dist/*.tar.gz
      
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # macos-13 is x86_64, macos-latest is arm64
        os: [ubuntu-latest, windows-latest, macos-13, macos-latest]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set architecture for macOS
        if: runner.os == 'macOS'
        run: |
          if [[ "${{ matrix.os }}" == "macos-13" ]]; then
            echo "CIBW_ARCHS_MACOS=x86_64" >> $GITHUB_ENV
          else
            echo "CIBW_ARCHS_MACOS=arm64" >> $GITHUB_ENV
          fi
      
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.19.1
        env:
          CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "*-musllinux_* *i686 *win32"
          CIBW_ARCHS_LINUX: "x86_64"
          # CIBW_ARCHS_MACOS is set dynamically above based on runner
          CIBW_ARCHS_WINDOWS: "AMD64"
          # Set macOS deployment target to 10.9 for compatibility
          MACOSX_DEPLOYMENT_TARGET: "10.9"
          # Linux setup - use pre-built binaries for manylinux compatibility
          CIBW_BEFORE_ALL_LINUX: >
            yum install -y wget tar xz &&
            cd /opt &&
            wget -q https://nim-lang.org/download/nim-2.2.4-linux_x64.tar.xz &&
            tar -xf nim-2.2.4-linux_x64.tar.xz &&
            ln -s /opt/nim-2.2.4/bin/nim /usr/local/bin/nim &&
            ln -s /opt/nim-2.2.4/bin/nimble /usr/local/bin/nimble &&
            nim --version &&
            nimble install nimpy -y
          # macOS setup - Install Nim for the host architecture
          # Note: We'll handle cross-compilation via ARCHFLAGS in BEFORE_BUILD
          CIBW_BEFORE_ALL_MACOS: |
            brew install nim
            nim --version
            nimble install nimpy -y
            echo "Host architecture: $(uname -m)"
          # Windows setup - download and extract Nim directly
          CIBW_BEFORE_ALL_WINDOWS: |
            curl -L https://nim-lang.org/download/nim-2.2.4_x64.zip -o nim.zip
            7z x nim.zip -oC:\
            C:\nim-2.2.4\bin\nim --version
            C:\nim-2.2.4\bin\nimble install nimpy -y
            echo Installing MinGW-w64 for 64-bit builds...
            choco install mingw --version=11.2.0 -y --force
            echo Refreshing environment...
            refreshenv
            echo Checking for GCC after installation...
            where gcc || echo GCC still not in PATH
            echo Adding MinGW to PATH manually...
            set PATH=C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin;%PATH%
            echo PATH=%PATH%
            gcc --version || echo GCC not available
            echo Checking GCC architecture...
            gcc -dumpmachine || echo Could not get GCC target
          # Common build requirements for Linux/macOS
          CIBW_BEFORE_BUILD_LINUX: |
            pip install --upgrade pip setuptools wheel
            pip install nimporter>=1.1.0
            echo "Nim version check:"
            which nim || echo "nim not in PATH"
            nim --version || echo "nim command failed"
            echo "Building Nim extension for Linux"
            cd {project} && python setup.py build_ext --inplace
          CIBW_BEFORE_BUILD_MACOS: |
            pip install --upgrade pip setuptools wheel
            pip install nimporter>=1.1.0
            echo "Building Nim extension for macOS"
            echo "Target architecture from ARCHFLAGS: $ARCHFLAGS"
            cd {project} && python setup.py build_ext --inplace
          # Windows-specific build requirements
          CIBW_BEFORE_BUILD_WINDOWS: |
            python -m pip install --upgrade pip setuptools wheel
            python -m pip install nimporter>=1.1.0
            echo Setting up build environment for Windows
            set PATH=C:\nim-2.2.4\bin;C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin;%PATH%
            echo Updated PATH=%PATH%
            echo Nim path check:
            where nim || echo nim not found in PATH
            C:\nim-2.2.4\bin\nim --version
            echo Checking for available compilers:
            where gcc || echo GCC not found
            gcc --version || echo GCC version check failed
            gcc -dumpmachine || echo GCC target check failed
            where cl || echo MSVC not found
            echo Python architecture check:
            python -c "import struct; print(f'Python is {struct.calcsize(\"P\") * 8}-bit')"
            python -c "import platform; print(f'Platform: {platform.platform()}')"
            python -c "import sys; print(f'Python prefix: {sys.prefix}')"
            python -c "import sys; import os; libs_dir = os.path.join(sys.prefix, 'libs'); print(f'Python libs directory: {libs_dir}'); import os; print('Contents:', os.listdir(libs_dir) if os.path.exists(libs_dir) else 'Not found')"
            echo Building Nim extension for Windows using setuptools
            cd {project}
            set NIM_PATH=C:\nim-2.2.4\bin\nim.exe
            set NIMBLE_PATH=C:\nim-2.2.4\bin\nimble.exe
            set CI=1
            python setup.py build_ext --inplace
            echo Checking for built extensions:
            dir nim_mmcif\*.pyd
            dir nim_mmcif\*.dll
            echo List all files in nim_mmcif:
            dir nim_mmcif\
            echo Checking extension architecture if built:
            if exist nim_mmcif\nim_mmcif.pyd (
              echo Found nim_mmcif.pyd, checking file details...
              python -c "import os; print(f'File size: {os.path.getsize(\"nim_mmcif/nim_mmcif.pyd\")} bytes')"
              echo Attempting to load the extension...
              python -c "import sys; sys.path.insert(0, '.'); import nim_mmcif; print('Extension loaded successfully!')" || echo Failed to import nim_mmcif module
            )
            echo Finished building extension
          # Test imports
          CIBW_TEST_COMMAND: |
            python -c "import nim_mmcif; print(f'nim_mmcif version: {nim_mmcif.__version__}')"
            python -c "from nim_mmcif import parse_mmcif; print('parse_mmcif imported successfully')"
          # Build settings
          CIBW_BUILD_VERBOSITY: 1
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_I686_IMAGE: manylinux_2_28
      
      - name: Setup Python for wheel check
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Check wheels with twine
        run: |
          python -m pip install twine
          twine check wheelhouse/*.whl
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

  publish:
    name: Publish to PyPI
    needs: [build-sdist, build-wheels]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/nim-mmcif
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist
      
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true
      
      - name: List distributions
        run: |
          echo "Distributions to publish:"
          ls -la dist/
      
      - name: Publish to Test PyPI
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_pypi == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          verbose: true
      
      - name: Publish to PyPI
        if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_pypi != 'true')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          verbose: true