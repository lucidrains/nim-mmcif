name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Publish to Test PyPI instead'
        required: false
        type: boolean
        default: false

jobs:
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install Nim
        run: |
          wget -q https://nim-lang.org/download/nim-2.2.4-linux_x64.tar.xz
          tar -xf nim-2.2.4-linux_x64.tar.xz
          export PATH=$PWD/nim-2.2.4/bin:$PATH
          echo "$PWD/nim-2.2.4/bin" >> $GITHUB_PATH
          nim --version
          nimble install nimpy -y
      
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build sdist
        run: python -m build --sdist
      
      - name: Check sdist with twine
        run: twine check dist/*.tar.gz
      
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-latest]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.19.1
        env:
          CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "*-musllinux_* *i686 *win32"
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_ARCHS_WINDOWS: "AMD64"
          # Linux setup - use pre-built binaries for manylinux compatibility
          CIBW_BEFORE_ALL_LINUX: >
            yum install -y wget tar xz &&
            wget -q https://nim-lang.org/download/nim-2.2.4-linux_x64.tar.xz &&
            tar -xf nim-2.2.4-linux_x64.tar.xz &&
            export PATH=$PWD/nim-2.2.4/bin:$PATH &&
            echo "$PWD/nim-2.2.4/bin" >> $GITHUB_PATH &&
            nim --version &&
            nimble install nimpy -y
          # macOS setup
          CIBW_BEFORE_ALL_MACOS: |
            brew install nim
            nim --version
            nimble install nimpy -y
          # Windows setup
          CIBW_BEFORE_ALL_WINDOWS: |
            choco install nim -y
            refreshenv
            nim --version
            nimble install nimpy -y
          # Common build requirements for Linux/macOS
          CIBW_BEFORE_BUILD_LINUX: |
            pip install --upgrade pip setuptools wheel
            pip install nimporter>=1.1.0
          CIBW_BEFORE_BUILD_MACOS: |
            pip install --upgrade pip setuptools wheel
            pip install nimporter>=1.1.0
          # Windows-specific build requirements
          CIBW_BEFORE_BUILD_WINDOWS: |
            python -m pip install --upgrade pip setuptools wheel
            python -m pip install nimporter>=1.1.0
          # Test imports
          CIBW_TEST_COMMAND: |
            python -c "import nim_mmcif; print(f'nim_mmcif version: {nim_mmcif.__version__}')"
            python -c "from nim_mmcif import parse_mmcif; print('parse_mmcif imported successfully')"
          # Build settings
          CIBW_BUILD_VERBOSITY: 1
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_I686_IMAGE: manylinux_2_28
      
      - name: Check wheels with twine
        run: |
          python -m pip install twine
          twine check wheelhouse/*.whl
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

  publish:
    name: Publish to PyPI
    needs: [build-sdist, build-wheels]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/nim-mmcif
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist
      
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true
      
      - name: List distributions
        run: |
          echo "Distributions to publish:"
          ls -la dist/
      
      - name: Publish to Test PyPI
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_pypi == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          verbose: true
      
      - name: Publish to PyPI
        if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_pypi != 'true')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          verbose: true