name: Publish

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Setup Nim OSX
        if: runner.os == 'macOS'
        run: |
          brew install nim

      - name: Setup Nim Linux / Windows
        if: runner.os == 'Linux' || runner.os == 'Windows'
        uses: jiro4989/setup-nim-action@v2
        with:
          nim-version: '2.2.4'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Nim dependencies
        run: nimble install -d

      - name: Nimble build
        run: nimble buildPythonModule

      - name: Build wheels
        run: |
          pip install build
          python -m build .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: dist/*.whl
  
  build-sdist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Setup Nim
        uses: jiro4989/setup-nim-action@v2
        with:
          nim-version: "stable"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
          nimble install -d
      
      - name: Build source distribution
        run: python -m build --sdist
      
      - name: Upload sdist artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  publish-pypi:
    needs: [build, build-sdist]
    runs-on: ubuntu-latest    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      
      - name: Flatten artifacts
        run: |
          mkdir -p final-dist
          find dist -name "*.whl" -exec cp {} final-dist/ \;
          find dist -name "*.tar.gz" -exec cp {} final-dist/ \;
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: final-dist/
