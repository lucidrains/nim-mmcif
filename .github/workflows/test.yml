name: Cross-Platform Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu (Linux)
          - os: ubuntu-latest
            python-version: '3.8'
            architecture: x64
          - os: ubuntu-latest
            python-version: '3.10'
            architecture: x64
          - os: ubuntu-latest
            python-version: '3.12'
            architecture: x64
            
          # Windows
          - os: windows-latest
            python-version: '3.8'
            architecture: x64
          - os: windows-latest
            python-version: '3.10'
            architecture: x64
          - os: windows-latest
            python-version: '3.12'
            architecture: x64
            
          # macOS x86_64
          - os: macos-13
            python-version: '3.8'
            architecture: x64
          - os: macos-13
            python-version: '3.10'
            architecture: x64
          - os: macos-13
            python-version: '3.12'
            architecture: x64
            
          # macOS ARM64 (M1/M2)
          - os: macos-latest
            python-version: '3.10'
            architecture: arm64
          - os: macos-latest
            python-version: '3.12'
            architecture: arm64
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    # Install Nim based on platform
    - name: Install Nim (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        curl https://nim-lang.org/choosenim/init.sh -sSf | sh -s -- -y
        echo "$HOME/.nimble/bin" >> $GITHUB_PATH
    
    - name: Install Nim (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install nim
    
    - name: Install Nim (Windows)
      if: runner.os == 'Windows'
      uses: jiro4989/setup-nim-action@v1
      with:
        nim-version: 'stable'
    
    - name: Verify Nim installation
      run: |
        nim --version
        nimble --version
    
    - name: Install nimpy
      run: |
        nimble install nimpy -y
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools nimporter pytest
    
    - name: Install package
      run: |
        pip install -e .
    
    - name: Run tests
      run: |
        python -m pytest tests/test_python_bindings.py -v
    
    - name: Test import
      run: |
        python -c "import nim_mmcif; print(f'Successfully imported nim_mmcif v{nim_mmcif.__version__}')"
        python -c "from nim_mmcif import parse_mmcif, get_atom_count; print('Functions imported successfully')"
    
    - name: Test nimporter compilation
      run: |
        python -c "import setuptools; import nimporter; nimporter.build_nim_extensions(); print('Nimporter build successful')"

  build-wheels:
    needs: test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-13]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    # Install Nim based on platform
    - name: Install Nim (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        curl https://nim-lang.org/choosenim/init.sh -sSf | sh -s -- -y
        echo "$HOME/.nimble/bin" >> $GITHUB_PATH
    
    - name: Install Nim (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install nim
    
    - name: Install Nim (Windows)
      if: runner.os == 'Windows'
      uses: jiro4989/setup-nim-action@v1
      with:
        nim-version: 'stable'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools nimporter
        nimble install nimpy -y
    
    - name: Build wheel
      run: |
        python -m build --wheel
    
    - name: Upload wheel
      uses: actions/upload-artifact@v3
      with:
        name: wheel-${{ matrix.os }}-${{ runner.arch }}
        path: dist/*.whl
    
    - name: Test wheel installation
      run: |
        pip install dist/*.whl
        python -c "import nim_mmcif; print('Wheel installation successful')"